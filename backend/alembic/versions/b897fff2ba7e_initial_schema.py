"""Initial schema

Revision ID: b897fff2ba7e
Revises: 
Create Date: 2025-07-24 06:36:29.033431

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

revision = 'b897fff2ba7e'
down_revision = None
branch_labels = None
depends_on = None

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_milestones_completed'), table_name='milestones')
    op.drop_index(op.f('idx_milestones_goal_id'), table_name='milestones')
    op.drop_table('milestones')
    op.drop_index(op.f('idx_performance_insights_active'), table_name='performance_insights')
    op.drop_index(op.f('idx_performance_insights_type'), table_name='performance_insights')
    op.drop_index(op.f('idx_performance_insights_user'), table_name='performance_insights')
    op.drop_table('performance_insights')
    op.drop_table('user_achievements')
    op.drop_index(op.f('idx_daily_stats_date'), table_name='daily_stats')
    op.drop_index(op.f('idx_daily_stats_date_user'), table_name='daily_stats')
    op.drop_table('daily_stats')
    op.drop_index(op.f('idx_efficiency_date_user'), table_name='study_efficiency_metrics')
    op.drop_index(op.f('idx_efficiency_topic'), table_name='study_efficiency_metrics')
    op.drop_table('study_efficiency_metrics')
    op.drop_index(op.f('idx_goal_progress_date'), table_name='goal_progress')
    op.drop_index(op.f('idx_goal_progress_goal_id'), table_name='goal_progress')
    op.drop_table('goal_progress')
    op.drop_table('exercises')
    op.drop_table('exercise_attempts')
    op.drop_table('achievements')
    op.drop_index(op.f('idx_goals_status'), table_name='goals')
    op.drop_index(op.f('idx_goals_target_date'), table_name='goals')
    op.drop_index(op.f('idx_goals_topic_id'), table_name='goals')
    op.drop_index(op.f('idx_goals_type'), table_name='goals')
    op.drop_table('goals')
    op.alter_column('bookmarks', 'pdf_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_index(op.f('idx_bookmarks_pdf_page'), table_name='bookmarks')
    op.alter_column('highlights', 'pdf_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_index(op.f('idx_highlights_pdf_page'), table_name='highlights')
    op.alter_column('knowledge_edges', 'source_node_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('knowledge_edges', 'target_node_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_index(op.f('idx_knowledge_nodes_type_entity'), table_name='knowledge_nodes')
    op.alter_column('note_links', 'source_note_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('note_links', 'target_note_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_index(op.f('idx_note_links_source'), table_name='note_links')
    op.drop_index(op.f('idx_note_links_target'), table_name='note_links')
    op.alter_column('note_versions', 'note_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_index(op.f('idx_notes_content_search'), table_name='notes', postgresql_using='gin')
    op.drop_index(op.f('idx_notes_created_at'), table_name='notes')
    op.drop_index(op.f('idx_notes_pdf_id'), table_name='notes')
    op.drop_index(op.f('idx_notes_session_id'), table_name='notes')
    op.drop_index(op.f('idx_notes_title_search'), table_name='notes', postgresql_using='gin')
    op.drop_index(op.f('idx_notes_topic_id'), table_name='notes')
    op.drop_index(op.f('idx_pdfs_created_at'), table_name='pdfs')
    op.drop_index(op.f('idx_pdfs_topic_id'), table_name='pdfs')
    op.drop_index(op.f('idx_sessions_created_at'), table_name='study_sessions')
    op.drop_index(op.f('idx_sessions_topic_id'), table_name='study_sessions')
    op.drop_index(op.f('idx_topics_created_at'), table_name='topics')
    # ### end Alembic commands ###

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_topics_created_at'), 'topics', [sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('idx_sessions_topic_id'), 'study_sessions', ['topic_id'], unique=False)
    op.create_index(op.f('idx_sessions_created_at'), 'study_sessions', [sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('idx_pdfs_topic_id'), 'pdfs', ['topic_id'], unique=False)
    op.create_index(op.f('idx_pdfs_created_at'), 'pdfs', [sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('idx_notes_topic_id'), 'notes', ['topic_id'], unique=False)
    op.create_index(op.f('idx_notes_title_search'), 'notes', [sa.literal_column("to_tsvector('english'::regconfig, title::text)")], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_notes_session_id'), 'notes', ['session_id'], unique=False)
    op.create_index(op.f('idx_notes_pdf_id'), 'notes', ['pdf_id'], unique=False)
    op.create_index(op.f('idx_notes_created_at'), 'notes', [sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('idx_notes_content_search'), 'notes', [sa.literal_column("to_tsvector('english'::regconfig, content)")], unique=False, postgresql_using='gin')
    op.alter_column('note_versions', 'note_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.create_index(op.f('idx_note_links_target'), 'note_links', ['target_note_id'], unique=False)
    op.create_index(op.f('idx_note_links_source'), 'note_links', ['source_note_id'], unique=False)
    op.alter_column('note_links', 'target_note_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('note_links', 'source_note_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.create_index(op.f('idx_knowledge_nodes_type_entity'), 'knowledge_nodes', ['node_type', 'entity_id'], unique=True)
    op.alter_column('knowledge_edges', 'target_node_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('knowledge_edges', 'source_node_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.create_index(op.f('idx_highlights_pdf_page'), 'highlights', ['pdf_id', 'page_number'], unique=False)
    op.alter_column('highlights', 'pdf_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.create_index(op.f('idx_bookmarks_pdf_page'), 'bookmarks', ['pdf_id', 'page_number'], unique=False)
    op.alter_column('bookmarks', 'pdf_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.create_table('goals',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('goal_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('specific_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('measurable_criteria', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('achievable_plan', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('relevant_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('time_bound_deadline', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('topic_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('pdf_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('parent_goal_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('target_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('current_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('target_unit', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('progress_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('target_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('estimated_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('actual_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('streak_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('best_streak', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('consistency_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('last_activity_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('motivation_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reward_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('difficulty_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('importance_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('xp_reward', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('badges_earned', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('milestones_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sub_goals_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('goal_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('reminder_frequency', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_goal_id'], ['goals.id'], name='goals_parent_goal_id_fkey'),
    sa.ForeignKeyConstraint(['pdf_id'], ['pdfs.id'], name='goals_pdf_id_fkey'),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], name='goals_topic_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='goals_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_goals_type'), 'goals', ['goal_type'], unique=False)
    op.create_index(op.f('idx_goals_topic_id'), 'goals', ['topic_id'], unique=False)
    op.create_index(op.f('idx_goals_target_date'), 'goals', ['target_date'], unique=False)
    op.create_index(op.f('idx_goals_status'), 'goals', ['status'], unique=False)
    op.create_table('achievements',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('badge_icon', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('badge_color', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('criteria_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('criteria_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('criteria_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('xp_reward', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rarity', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('unlock_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='achievements_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('exercise_attempts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('exercise_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_answer', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_correct', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('score', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True),
    sa.Column('time_taken', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('confidence_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('attempted_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('exercise_attempts_pkey'))
    )
    op.create_table('exercises',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('question', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('answer', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('explanation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('topic_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('exercise_type', sa.VARCHAR(length=50), server_default=sa.text("'multiple_choice'::character varying"), autoincrement=False, nullable=True),
    sa.Column('difficulty', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('1.0'), autoincrement=False, nullable=True),
    sa.Column('estimated_time', sa.INTEGER(), server_default=sa.text('5'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('exercises_pkey'))
    )
    op.create_table('goal_progress',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('goal_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('previous_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('new_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('change_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('progress_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('activity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('automatic_update', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('recorded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], name=op.f('goal_progress_goal_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['session_id'], ['study_sessions.id'], name=op.f('goal_progress_session_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('goal_progress_pkey'))
    )
    op.create_index(op.f('idx_goal_progress_goal_id'), 'goal_progress', ['goal_id'], unique=False)
    op.create_index(op.f('idx_goal_progress_date'), 'goal_progress', ['recorded_at'], unique=False)
    op.create_table('study_efficiency_metrics',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('measurement_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('topic_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('pages_per_hour', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('concepts_mastered_per_hour', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('retention_rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('application_success_rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('attention_span_minutes', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('distraction_frequency', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('deep_work_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('cognitive_load_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('optimal_difficulty_level', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('challenge_comfort_ratio', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('flow_state_frequency', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('energy_efficiency', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('environment_effectiveness', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('time_of_day_performance', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('session_length_optimization', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('personal_benchmark_ratio', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('peer_benchmark_ratio', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('improvement_rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('calculated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], name=op.f('study_efficiency_metrics_topic_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('study_efficiency_metrics_pkey'))
    )
    op.create_index(op.f('idx_efficiency_topic'), 'study_efficiency_metrics', ['topic_id'], unique=False)
    op.create_index(op.f('idx_efficiency_date_user'), 'study_efficiency_metrics', ['measurement_date', 'user_id'], unique=False)
    op.create_table('daily_stats',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('stat_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('total_study_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('active_study_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('break_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('idle_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_sessions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('completed_sessions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('average_session_duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('average_focus_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('pages_read', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pdfs_completed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('exercises_completed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notes_created', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('highlights_made', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('goals_worked_on', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('goals_completed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('milestones_achieved', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pomodoro_cycles', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pomodoro_effectiveness', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('reading_speed_wpm', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('comprehension_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('productivity_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('xp_earned', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('achievements_unlocked', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('streak_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('study_environments', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('peak_performance_hour', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('topic_breakdown', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('session_breakdown', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('goal_breakdown', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('daily_stats_pkey'))
    )
    op.create_index(op.f('idx_daily_stats_date_user'), 'daily_stats', ['stat_date', 'user_id'], unique=True)
    op.create_index(op.f('idx_daily_stats_date'), 'daily_stats', ['stat_date'], unique=False)
    op.create_table('user_achievements',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('achievement_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('earned_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('progress_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('triggered_by_goal', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('triggered_by_session', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['achievement_id'], ['achievements.id'], name=op.f('user_achievements_achievement_id_fkey')),
    sa.ForeignKeyConstraint(['triggered_by_goal'], ['goals.id'], name=op.f('user_achievements_triggered_by_goal_fkey')),
    sa.ForeignKeyConstraint(['triggered_by_session'], ['study_sessions.id'], name=op.f('user_achievements_triggered_by_session_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_achievements_pkey'))
    )
    op.create_table('performance_insights',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('insight_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('topic_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('goal_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('data_points', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('impact_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('is_actionable', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('action_items', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('estimated_improvement', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('time_period_start', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('time_period_end', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('valid_until', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('user_dismissed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('user_acted_on', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_shown', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], name=op.f('performance_insights_goal_id_fkey')),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], name=op.f('performance_insights_topic_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('performance_insights_pkey'))
    )
    op.create_index(op.f('idx_performance_insights_user'), 'performance_insights', ['user_id'], unique=False)
    op.create_index(op.f('idx_performance_insights_type'), 'performance_insights', ['insight_type'], unique=False)
    op.create_index(op.f('idx_performance_insights_active'), 'performance_insights', ['is_active'], unique=False)
    op.create_table('milestones',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('goal_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('target_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('target_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('order_sequence', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_completed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('completed_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('xp_reward', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('badge_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('celebration_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], name=op.f('milestones_goal_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('milestones_pkey'))
    )
    op.create_index(op.f('idx_milestones_goal_id'), 'milestones', ['goal_id'], unique=False)
    op.create_index(op.f('idx_milestones_completed'), 'milestones', ['is_completed'], unique=False)
    # ### end Alembic commands ###
