// frontend/src/App.tsx
import React, { useState, useEffect } from 'react';
import './App.css';

interface APIStatus {
  project: string;
  current_stage: string;
  completed: string[];
  api_endpoints: {
    topics: string;
    pdfs: string;
    total_implemented: number;
  };
}

interface Topic {
  id: string;
  name: string;
  description: string;
  color: string;
  total_pdfs: number;
  study_progress: number;
  created_at: string;
}

interface PDF {
  id: string;
  title: string;
  description: string;
  file_name: string;
  total_pages: number;
  reading_progress: number;
  created_at: string;
}

function App() {
  const [apiStatus, setApiStatus] = useState<APIStatus | null>(null);
  const [topics, setTopics] = useState<Topic[]>([]);
  const [pdfs, setPdfs] = useState<PDF[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // Fetch API status and data
    const fetchData = async () => {
      try {
        // Get API status
        const statusResponse = await fetch('http://localhost:8000/api/v1/status');
        const statusData = await statusResponse.json();
        setApiStatus(statusData);

        // Get topics
        const topicsResponse = await fetch('http://localhost:8000/api/v1/topics');
        if (topicsResponse.ok) {
          const topicsData = await topicsResponse.json();
          setTopics(topicsData.topics || []);
        }

        // Get PDFs
        const pdfsResponse = await fetch('http://localhost:8000/api/v1/pdfs');
        if (pdfsResponse.ok) {
          const pdfsData = await pdfsResponse.json();
          setPdfs(pdfsData.pdfs || []);
        }

      } catch (err) {
        console.error('Error fetching data:', err);
        setError('Unable to connect to backend API');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const createSampleTopic = async () => {
    try {
      const response = await fetch('http://localhost:8000/api/v1/topics', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: 'Sample Topic',
          description: 'A test topic created from the frontend',
          color: '#3498db',
          difficulty_level: 1,
          priority_level: 1
        })
      });

      if (response.ok) {
        const newTopic = await response.json();
        setTopics(prev => [...prev, newTopic]);
        alert('Topic created successfully!');
      } else {
        alert('Error creating topic');
      }
    } catch (err) {
      alert('Error connecting to API');
    }
  };

  if (loading) {
    return (
      <div className="App">
        <header className="App-header">
          <div className="loading">
            <div className="spinner"></div>
            <h2>Loading StudySprint 4.0...</h2>
            <p>Connecting to backend API...</p>
          </div>
        </header>
      </div>
    );
  }

  if (error) {
    return (
      <div className="App">
        <header className="App-header">
          <h1>StudySprint 4.0</h1>
          <div className="error">
            <h2>‚ö†Ô∏è Backend Connection Error</h2>
            <p>{error}</p>
            <div className="error-help">
              <p>Make sure the backend is running:</p>
              <code>cd scripts && ./start_backend.sh</code>
            </div>
          </div>
        </header>
      </div>
    );
  }

  return (
    <div className="App">
      <header className="App-header">
        <h1>üöÄ StudySprint 4.0</h1>
        <p className="subtitle">Complete Personal Study Tool with Advanced Analytics</p>

        {/* API Status */}
        {apiStatus && (
          <div className="status-section">
            <h2>üìä {apiStatus.current_stage}</h2>
            <div className="api-stats">
              <div className="stat">
                <span className="stat-number">{apiStatus.api_endpoints.total_implemented}</span>
                <span className="stat-label">API Endpoints</span>
              </div>
              <div className="stat">
                <span className="stat-number">{topics.length}</span>
                <span className="stat-label">Topics</span>
              </div>
              <div className="stat">
                <span className="stat-number">{pdfs.length}</span>
                <span className="stat-label">PDFs</span>
              </div>
            </div>
          </div>
        )}

        {/* Features Grid */}
        <div className="features-grid">
          <div className="feature-card completed">
            <h3>‚úÖ Backend API</h3>
            <p>{apiStatus?.api_endpoints.total_implemented || 16} endpoints ready</p>
            <div className="feature-details">
              <small>Topics: {apiStatus?.api_endpoints.topics}</small>
              <small>PDFs: {apiStatus?.api_endpoints.pdfs}</small>
            </div>
          </div>

          <div className="feature-card completed">
            <h3>‚úÖ Database</h3>
            <p>PostgreSQL with full schema</p>
            <div className="feature-details">
              <small>Topics & PDFs tables ready</small>
            </div>
          </div>

          <div className="feature-card completed">
            <h3>‚úÖ File Upload</h3>
            <p>PDF upload system ready</p>
            <div className="feature-details">
              <small>Supports up to 500MB files</small>
            </div>
          </div>

          <div className="feature-card in-progress">
            <h3>üîÑ PDF Viewer</h3>
            <p>Frontend implementation</p>
            <div className="feature-details">
              <small>PDF.js integration needed</small>
            </div>
          </div>

          <div className="feature-card pending">
            <h3>‚è≥ Study Timer</h3>
            <p>Coming in Stage 4</p>
          </div>

          <div className="feature-card pending">
            <h3>‚è≥ Notes System</h3>
            <p>Coming in Stage 5</p>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="actions-section">
          <h3>üß™ Test Backend Connection</h3>
          <div className="action-buttons">
            <button 
              className="action-btn primary"
              onClick={createSampleTopic}
            >
              Create Sample Topic
            </button>
            <a 
              href="http://localhost:8000/docs" 
              target="_blank" 
              rel="noopener noreferrer"
              className="action-btn secondary"
            >
              View API Docs
            </a>
            <a 
              href="http://localhost:8000/api/v1/status" 
              target="_blank" 
              rel="noopener noreferrer"
              className="action-btn secondary"
            >
              API Status
            </a>
          </div>
        </div>

        {/* Data Preview */}
        {(topics.length > 0 || pdfs.length > 0) && (
          <div className="data-section">
            <h3>üìä Current Data</h3>
            <div className="data-grid">
              {topics.length > 0 && (
                <div className="data-card">
                  <h4>Topics ({topics.length})</h4>
                  <div className="data-list">
                    {topics.slice(0, 3).map(topic => (
                      <div key={topic.id} className="data-item">
                        <span 
                          className="topic-color" 
                          style={{ backgroundColor: topic.color }}
                        ></span>
                        <span className="data-name">{topic.name}</span>
                        <span className="data-meta">{topic.total_pdfs} PDFs</span>
                      </div>
                    ))}
                    {topics.length > 3 && (
                      <div className="data-item">
                        <span className="data-more">+{topics.length - 3} more</span>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {pdfs.length > 0 && (
                <div className="data-card">
                  <h4>PDFs ({pdfs.length})</h4>
                  <div className="data-list">
                    {pdfs.slice(0, 3).map(pdf => (
                      <div key={pdf.id} className="data-item">
                        <span className="data-name">{pdf.title}</span>
                        <span className="data-meta">{pdf.total_pages} pages</span>
                      </div>
                    ))}
                    {pdfs.length > 3 && (
                      <div className="data-item">
                        <span className="data-more">+{pdfs.length - 3} more</span>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Stage Progress */}
        <div className="progress-section">
          <h3>üéØ Stage 2 Progress</h3>
          <div className="progress-items">
            {apiStatus?.completed.map((item, index) => (
              <div key={index} className="progress-item completed">
                {item}
              </div>
            ))}
          </div>
          <div className="next-stage">
            <p><strong>Next:</strong> Stage 3 - Topics Organization (Week 3)</p>
          </div>
        </div>
      </header>
    </div>
  );
}

export default App;